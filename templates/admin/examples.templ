package admin_templates

import "github.com/w1png/go-htmx-ecommerce-template/models"
import "github.com/w1png/go-htmx-ecommerce-template/templates/scripts"
import "fmt"
import "strings"
import "github.com/w1png/go-htmx-ecommerce-template/templates/components"
import "github.com/w1png/go-htmx-ecommerce-template/file_storage"
import "github.com/w1png/go-htmx-ecommerce-template/templates/components/icons"

templ Example(example *models.Example) {
	<div class="admin-object-card-parent justify-between p-2" id={ fmt.Sprintf("example_%d", example.ID) }>
		if len(example.Thumbnails) > 0 {
			<img
				class="h-full aspect-square"
				src={ file_storage.ObjectStorageId(example.Thumbnails[0]).GetUrl("image", "webp") }
				onerror="this.src='/static/image.svg'"
			/>
		}
		<span class="text-xl truncate">{ example.Title }</span>
		<div class="flex flex-row gap-2">
			<button
				class="submit h-12 group"
				hx-get={ fmt.Sprintf("/admin/api/examples/%d/edit", example.ID) }
				hx-target="#edit-example-target"
				hx-swap="innerHTML"
			>
				@icons.Edit("h-6 aspect-square text-white group-hover:text-accent block md:hidden")
				<span class="hidden md:block">Редактировать</span>
			</button>
			<button
				class="delete h-12 group"
				hx-get={ fmt.Sprintf("/admin/api/examples/%d/delete", example.ID) }
				hx-target="#delete-example-target"
				hx-swap="innerHTML"
			>
				@icons.Delete("h-6 aspect-square text-white group-hover:text-delete block md:hidden")
				<span class="hidden md:block">Удалить</span>
			</button>
		</div>
	</div>
}

templ DeleteExampleModal(example *models.Example) {
	@components.Modal("delete_example_modal_open") {
		<span hx-ext="response-targets" x-init="delete_example_modal_open = true">
			<div class="w-[min(30rem,90vw)] bg-white rounded-2xl border-2 border-accent flex flex-col gap-4 p-6">
				<h3 class="font-bold text-2xl">Удаление примера</h3>
				<hr/>
				<p class="text-subtext">Вы уверены, что хотите удалить пример { example.Title }?</p>
				<div class="w-full flex flex-row gap-2">
					<button
						hx-target={ fmt.Sprintf("#example_%d", example.ID) }
						hx-swap="outerHTML"
						class="delete"
						hx-delete={ fmt.Sprintf("/admin/api/examples/%d", example.ID) }
						@click="delete_example_modal_open = false"
					>Удалить</button>
					<button class="submit" @click="delete_example_modal_open = false">Отмена</button>
				</div>
			</div>
		</span>
	}
}

templ AddExampleModal(custom_chip_bases []*models.CustomChipBase) {
	@components.Modal("add_example_modal_open") {
		<span hx-ext="response-targets" x-init="add_example_modal_open = true" hx-ext="response-targets">
			<form
				hx-post="/admin/api/examples"
				hx-target="#example-list"
				hx-swap="afterbegin"
				hx-target-error="#add-error"
				hx-encoding="multipart/form-data"
				hx-indicator="#add-loading"
				class="w-[min(30rem,90vw)] bg-white rounded-2xl border-2 border-accent flex flex-col gap-2 p-6"
			>
				<label class="submit">
					<span id="image-upload-text">Загрузить изображения</span>
					<input
						type="file"
						name="images"
						accept="image/*"
						multiple
						@change="document.getElementById('image-upload-text').innerText = `Загружено ${$el.files.length} изображений`"
					/>
				</label>
				@components.LabeledInput("Название", templ.Attributes{"type": "text", "name": "title"}, "w-full")
				@components.LabeledInput("Тэги (через запятую)", templ.Attributes{"type": "text", "name": "tags"}, "w-full")
				<label class="labeled-input-parent">
					Основа
					<select name="custom_chip_base_id" id="add-custom-chip-base" class="select">
						for _, custom_chip_base := range custom_chip_bases {
							<option value={ fmt.Sprintf("%d", custom_chip_base.ID) }>{ custom_chip_base.Title }</option>
						}
					</select>
				</label>
				<p id="add-error" class="error"></p>
				<p id="add-loading" class="htmx-indicator">Загрузка...</p>
				<button class="submit" x-on:htmx:after-swap.window="add_example_modal_open = false">Добавить</button>
			</form>
		</span>
	}
}

func tags_to_string(tags []string) string {
	if len(tags) == 0 {
		return ""
	}
	return strings.Join(tags, ", ")
}

templ EditExampleModal(example *models.Example, custom_chip_bases []*models.CustomChipBase) {
	@components.Modal("edit_example_modal_open") {
		<span hx-ext="response-targets" x-init="edit_example_modal_open = true" hx-ext="response-targets">
			<form
				hx-put={ fmt.Sprintf("/admin/api/examples/%d", example.ID) }
				hx-target={ fmt.Sprintf("#example_%d", example.ID) }
				hx-swap="outerHTML"
				hx-target-error="#edit-error"
				class="w-[min(30rem,90vw)] bg-white rounded-2xl border-2 border-accent flex flex-col gap-2 p-6"
			>
				<div class="flex flex-row gap-2 h-12 overflow-x-scroll">
					for _, thumbnail := range example.Thumbnails {
						<img
							src={ file_storage.ObjectStorageId(thumbnail).GetUrl("image", "webp") }
							class="h-12 aspect-square object-cover rounded-md"
						/>
					}
				</div>
				@components.LabeledInput("Название", templ.Attributes{"type": "text", "name": "title", "value": example.Title},
					"w-full")
				@components.LabeledInput("Тэги (через запятую)", templ.Attributes{"type": "text", "name": "tags", "value": tags_to_string(example.Tags)}, "w-full")
				<label class="labeled-input-parent">
					Основа
					<select name="custom_chip_base_id" id="add-custom-chip-base" class="select">
						for _, custom_chip_base := range custom_chip_bases {
							<option value={ fmt.Sprintf("%d", custom_chip_base.ID) }>{ custom_chip_base.Title }</option>
						}
					</select>
				</label>
				<p id="edit-error" class="error"></p>
				<button class="submit" x-on:htmx:after-swap.window="edit_example_modal_open = false">Добавить</button>
			</form>
		</span>
	}
}

templ ExamplesList(examples []*models.Example, search string, next_page int) {
	for _, example := range examples {
		@Example(example)
	}
	if len(examples) == models.EXAMPLES_PER_PAGE {
		<span
			class="hidden"
			hx-get={ fmt.Sprintf("/admin/api/examples/page/%d?search=%s", next_page, search) }
			hx-target="#example-list"
			hx-swap="beforeend"
			hx-trigger="revealed"
			hx-indicator="#pagination-loading"
		></span>
	}
}

templ examplesPage(examples []*models.Example, search string) {
	<span x-data="{ add_example_modal_open: false }" id="add-example-target"></span>
	<span x-data="{ edit_example_modal_open: false }" id="edit-example-target"></span>
	<span x-data="{ delete_example_modal_open: false }" id="delete-example-target"></span>
	<div class="container mx-auto p-4 flex flex-col gap-6 mt-16">
		<div class="flex flex-row gap-2">
			<input
				type="text"
				class="input"
				name="search"
				placeholder="Поиск"
				hx-post="/admin/api/examples/search"
				hx-target="#example-list"
				hx-swap="innerHTML"
				hx-trigger="input changed delay:500ms, search"
				value={ search }
			/>
			<button
				class="submit"
				hx-get="/admin/api/examples/add"
				hx-target="#add-example-target"
				hx-swap="innerHTML"
			>Добавить</button>
		</div>
		<div class="flex flex-col gap-2" id="example-list">
			@ExamplesList(examples, search, 2)
		</div>
		<p class="htmx-indicator" id="pagination-loading">Загрузка...</p>
	</div>
}

templ Examples(examples []*models.Example, search string) {
	@Base("Примеры работ") {
		@examplesPage(examples, search)
	}
}

templ ExamplesApi(examples []*models.Example, search string) {
	@scripts.SetTitle("Примеры работ")
	@Navbar()
	@examplesPage(examples, search)
}
