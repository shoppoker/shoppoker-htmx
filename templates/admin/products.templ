package admin_templates

import "github.com/w1png/go-htmx-ecommerce-template/models"
import "github.com/w1png/go-htmx-ecommerce-template/templates/scripts"
import "github.com/w1png/go-htmx-ecommerce-template/templates/components/icons"
import "github.com/w1png/go-htmx-ecommerce-template/templates/components"
import "fmt"
import "github.com/w1png/go-htmx-ecommerce-template/file_storage"

templ Product(product *models.Product) {
<div class="admin-object-card-parent justify-between p-2" id={ fmt.Sprintf("product_%d", product.ID) }>
  <div class="flex gap-2 h-full items-center">
  if len(product.Thumbnails) > 0 {
    <img class="h-full aspect-square rounded-md" src={
      file_storage.ObjectStorageId(product.Thumbnails[0]).GetUrl("image", "webp" ) } />
  } else {
  <div class="h-full bg-secondary aspect-square rounded-md flex items-center justify-center">
  <img clas="h-1/4 aspect-square" src="/static/image.svg" />
  </div>
  }
    <span class="text-xl truncate">{ product.Title }</span>
  </div>
  <div class="flex flex-row gap-2 items-center">
    <button class="submit h-12 group" hx-get={ fmt.Sprintf("/admin/api/products/%d/edit", product.ID) }
      hx-target="#edit-product-target" hx-swap="innerHTML">
      @icons.Edit("h-6 aspect-square text-white group-hover:text-accent block md:hidden")
      <span class="hidden md:block">Редактировать</span>
    </button>
    <button class="delete h-12 group" hx-get={ fmt.Sprintf("/admin/api/products/%d/delete", product.ID) }
      hx-target="#delete-product-target" hx-swap="innerHTML">
      @icons.Delete("h-6 aspect-square text-white group-hover:text-delete block md:hidden")
      <span class="hidden md:block">Удалить</span>
    </button>
  </div>
</div>
}

templ AddProductModal(categories []*models.Category) {
@components.Modal("add_product_modal_open") {
<span hx-ext="response-targets" x-init="add_product_modal_open = true">
  <form hx-post="/admin/api/products" hx-target="#product-list" hx-swap="afterbegin" hx-target-error="#error"
    hx-encoding="multipart/form-data"
    class="w-[min(60rem,90vw)] bg-white rounded-2xl border-2 border-accent flex flex-row gap-2 p-6">
    <div class="flex flex-col gap-2 w-1/2" x-data="{ title: '' }">
    <label class="submit">
    <span id="image-upload-text-">Загрузить изображения</span>
    <input class="hidden" type="file" accept="image/*" name="images" @change="document.getElementById('image-upload-text-').innerText = `Загружено ${$el.files.length} изображений`" multiple/>
    </label>
      @components.LabeledInput("Название", templ.Attributes{"type": "text", "name": "title", "x-model": "title"}, "w-full")
      @components.LabeledInput("Ссылка", templ.Attributes{"type": "text", "name": "slug", "x-init": "$watch('title', title => $el.value = rus_to_latin(title))"}, "w-full")
      @components.LabeledInput("Цена", templ.Attributes{"type": "number", "name": "price", "value": "0"}, "w-full")
      @components.LabeledInput("Цена со скидкой (0 - без скидки)", templ.Attributes{"type": "number", "name": "discount_price", "value": "0"}, "w-full")
      @components.LabeledInput("Тэги", templ.Attributes{"type": "text", "name": "tags"}, "w-full")
    </div>
    <div class="flex flex-col gap-2 w-1/2">
      <label>
        Категория
        <select name="category" id="add-category" class="select">
          for _, category := range categories {
          <option value={ fmt.Sprintf("%d", category.ID) }>{ category.Name }</option>
          }
        </select>
      </label>
      <label>
        Наличие
        <select name="stock_type" id="add-stock_type" class="select">
          for _, stock_type := range models.STOCK_TYPES_ARRAY {
          <option value={ fmt.Sprintf("%d", stock_type) }> { stock_type.ToString() }</option>
          }
        </select>
      </label>
      @components.LabeledTextarea("Описание", templ.Attributes{"name": "description"}, "")
      @components.Checkbox("Отображается", "add-is_enabled", "is_enabled", "true", true)
      @components.Checkbox("На главной", "add-is_featured", "if_featured", "true", false)
      <p id="error" class="error"></p>
      <button class="submit" x-on:htmx:after-swap.window="add_product_modal_open = false">Добавить</button>
    </div>

  </form>
</span>
}
}

templ EditProductModal(product *models.Product, categories []*models.Category) {
@components.Modal("edit_product_modal_open") {
<span hx-ext="response-targets" x-init="edit_product_modal_open = true">
  <form hx-put={ fmt.Sprintf("/admin/api/products/%d", product.ID) } hx-target={ fmt.Sprintf("#product_%d", product.ID) } hx-swap="outerHTML" hx-target-error="#error"
    hx-encoding="multipart/form-data"
    class="w-[min(60rem,90vw)] bg-white rounded-2xl border-2 border-accent flex flex-row gap-2 p-6">
    <div class="flex flex-col gap-2 w-1/2">
    <div class="flex flex-row gap-1">
      for _, thumbnail := range product.Thumbnails {
        <img class="h-12 aspect-square object-cover rounded-md" src={ file_storage.ObjectStorageId(thumbnail).GetUrl("image", "webp") } />
      }
          <label class="submit">
    <span id="edit-image-upload-text-">Загрузить изображения</span>
    <input class="hidden" type="file" accept="image/*" name="images" @change="document.getElementById('edit-image-upload-text-').innerText = `Загружено ${$el.files.length} изображений`" multiple/>
    </label>

    </div>
      @components.LabeledInput("Название", templ.Attributes{"type": "text", "name": "title", "value": product.Title}, "w-full")
      @components.LabeledInput("Ссылка", templ.Attributes{"type": "text", "name": "slug", "value": product.Slug}, "w-full")
      @components.LabeledInput("Цена", templ.Attributes{"type": "number", "name": "price", "value": fmt.Sprintf("%d", product.Price)}, "w-full")
      @components.LabeledInput("Цена со скидкой (0 - без скидки)", templ.Attributes{"type": "number", "name": "discount_price", "value": fmt.Sprintf("%d", product.DiscountPrice)}, "w-full")
      @components.LabeledInput("Тэги", templ.Attributes{"type": "text", "name": "tags", "value": product.Tags}, "w-full")
    </div>
    <div class="flex flex-col gap-2 w-1/2">
      <label>
        Категория
        <select name="category" id="edit-category" class="select">
          for _, category := range categories {
          <option value={ fmt.Sprintf("%d", category.ID) }>{ category.Name }</option>
          }
        </select>
      </label>
      <label>
        Наличие
        <select name="stock_type" id="edit-stock_type" class="select">
          for _, stock_type := range models.STOCK_TYPES_ARRAY {
          <option value={ fmt.Sprintf("%d", stock_type) }> { stock_type.ToString() }</option>
          }
        </select>
      </label>
      @components.LabeledTextarea("Описание", templ.Attributes{"name": "description"}, product.Description)
      @components.Checkbox("Отображается", "edit-is_enabled", "is_enabled", "true", product.IsEnabled)
      @components.Checkbox("На главной", "edit-is_featured", "if_featured", "true", product.IsFeatured)
      <p id="error" class="error"></p>
      <button class="submit" x-on:htmx:after-swap.window="edit_product_modal_open = false">Добавить</button>
    </div>

  </form>
</span>
}
}

templ ProductsList(products []*models.Product, next_page int, search string) {
for _, product := range products {
@Product(product)
}
if len(products) == models.PRODUCTS_PER_PAGE {
<span class="hidden" hx-get={ fmt.Sprintf("/admin/api/products/page/%d?search=%s", next_page, search) }
  hx-target="#product-list" hx-swap="beforeend" hx-trigger="revealed" hx-indicator="#pagination-loading"></span>
}
}

templ productsApi(products []*models.Product, search string) {
<span x-data="{ add_product_modal_open: false }" id="add-product-target"></span>
<span id="edit-product-target" x-data="{ edit_product_modal_open: false }"></span>
<span id="delete-product-target" x-data="{ delete_product_modal_open: false }"></span>
<div class="container mx-auto p-4 flex flex-col gap-6 mt-16">
  <div class="flex flex-row gap-2">
    <input type="text" class="input" name="search" placeholder="Поиск" hx-post="/admin/api/products/search"
      hx-target="#product-list" hx-swap="innerHTML" hx-trigger="input changed delay:500ms, search" value={ search } />
    <button class="submit" hx-get="/admin/api/products/add" hx-target="#add-product-target"
      hx-swap="innerHTML">Добавить</button>
  </div>
  <div class="flex flex-col gap-2" id="product-list">
    @ProductsList(products, 2, search)
  </div>
  <p class="htmx-indicator" id="pagination-loading">Загрузка...</p>
</div>
}

templ Products(products []*models.Product, search string) {
@Base("Товары") {
@productsApi(products, search)
}
}

templ ProductsApi(products []*models.Product, search string) {
@scripts.SetTitle("Товары")
@Navbar()
@productsApi(products, search)
}
