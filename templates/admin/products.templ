package admin_templates

import "github.com/w1png/go-htmx-ecommerce-template/models"
import "github.com/w1png/go-htmx-ecommerce-template/templates/scripts"
import "github.com/w1png/go-htmx-ecommerce-template/templates/components/icons"
import "github.com/w1png/go-htmx-ecommerce-template/templates/components"
import "fmt"
import "github.com/w1png/go-htmx-ecommerce-template/file_storage"

templ Product(product *models.Product) {
	<div class="admin-object-card-parent justify-between p-2" id={ fmt.Sprintf("product_%d", product.ID) }>
		<div class="flex gap-2 h-full items-center">
			if len(product.Thumbnails) > 0 {
				<img
					class="h-full aspect-square rounded-md"
					src={ file_storage.ObjectStorageId(product.Thumbnails[0]).GetUrl("image", "webp") }
				/>
			} else {
				<div class="h-full bg-secondary aspect-square rounded-md flex items-center justify-center">
					<img clas="h-1/4 aspect-square" src="/static/image.svg"/>
				</div>
			}
			<span class="text-xl truncate">{ product.Title }</span>
		</div>
		<div class="flex flex-row gap-2 items-center">
			<button
				class="submit h-12 group"
				hx-get={ fmt.Sprintf("/admin/api/products/%d/edit", product.ID) }
				hx-target="#edit-product-target"
				hx-swap="innerHTML"
			>
				@icons.Edit("h-6 aspect-square text-white group-hover:text-accent block md:hidden")
				<span class="hidden md:block">Редактировать</span>
			</button>
			<button
				class="delete h-12 group"
				hx-get={ fmt.Sprintf("/admin/api/products/%d/delete", product.ID) }
				hx-target="#delete-product-target"
				hx-swap="innerHTML"
			>
				@icons.Delete("h-6 aspect-square text-white group-hover:text-delete block md:hidden")
				<span class="hidden md:block">Удалить</span>
			</button>
		</div>
	</div>
}

templ AddProductModal(categories []*models.Category) {
	@components.Modal("add_product_modal_open") {
		<span hx-ext="response-targets" x-init="add_product_modal_open = true">
			<form
				x-data="{ title: '' }"
				hx-post="/admin/api/products"
				hx-target="#product-list"
				hx-swap="afterbegin"
				hx-target-error="#error"
				hx-encoding="multipart/form-data"
				hx-indicator="#add-loading"
				class="w-[min(36rem,90vw)] max-h-[90vh] bg-white rounded-2xl border-2 border-accent flex flex-col overflow-y-scroll gap-2 p-6"
			>
				<div
					class="flex flex-col gap-4"
					x-init="$watch('images', images => {updateFiles(images))})"
					x-data="{ images: [],
              updateFiles: (images) => {
                let input = document.getElementById('add-images-input');
                let dt = new DataTransfer();
                for (let i = 0; i < images.length; i++) {
                  dt.items.add(images[i]);
                }
                input.files = dt.files;
              }
              }"
				>
					<div class="grid grid-cols-2 gap-2">
						<template x-for="(image, index) in images" :key="index">
							<div
								class="relative aspect-video group"
								x-sortable:images="index"
							>
								<div
									class="absolute top-2 right-2 w-4 h-4 group-hover:opacity-100 opacity-0 "
									@click="images = images.filter(i => i !== image); updateFiles(images)"
								>
									@icons.Delete("w-4 h-4 hover:scale-105 cursor-pointer")
								</div>
								<img class="h-full w-full object-contain" x-bind:src="window.URL.createObjectURL(image)"/>
							</div>
						</template>
					</div>
					<label class="submit">
						Загрузить фотографии
						<input
							class="hidden"
							type="file"
							accept="image/*"
							name="images"
							id="add-images-input"
							@change="images = [...images, ...$el.files]; updateFiles(images)"
							multiple
						/>
					</label>
				</div>
				@components.LabeledInput("Название", templ.Attributes{"type": "text", "name": "title", "x-model": "title"},
					"w-full")
				@components.LabeledInput("Ссылка", templ.Attributes{"type": "text", "name": "slug", "x-init": "$watch('title',title => $el.value = rus_to_latin(title))"}, "w-full")
				@components.LabeledInput("Цена", templ.Attributes{"type": "number", "name": "price", "value": "0"}, "w-full")
				@components.LabeledInput("Цена со скидкой (0 - без скидки)", templ.Attributes{"type": "number", "name": "discount_price", "value": "0"}, "w-full")
				@components.LabeledInput("Тэги", templ.Attributes{"type": "text", "name": "tags"}, "w-full")
				<label>
					Категория
					<select name="category" id="add-category" class="select">
						for _, category := range categories {
							<option value={ fmt.Sprintf("%d", category.ID) }>{ category.Name }</option>
						}
					</select>
				</label>
				<label>
					Наличие
					<select name="stock_type" id="add-stock_type" class="select">
						for _, stock_type := range models.STOCK_TYPES_ARRAY {
							<option value={ fmt.Sprintf("%d", stock_type) }>{ stock_type.ToString() }</option>
						}
					</select>
				</label>
				@components.LabeledTextarea("Описание", templ.Attributes{"name": "description"}, "")
				@components.Checkbox("Отображается", "add-is_enabled", "is_enabled", "true", true)
				@components.Checkbox("На главной", "add-is_featured", "is_featured", "true", false)
				<p id="error" class="error"></p>
				<p id="add-loading" class="text-sm htmx-indicator">Загрузка...</p>
				<button class="submit" x-on:htmx:after-swap.window="add_product_modal_open = false">Добавить</button>
			</form>
		</span>
	}
}

templ DeleteProductModal(product *models.Product) {
	@components.Modal("delete_product_modal_open") {
		<span hx-ext="response-targets" x-init="delete_product_modal_open = true">
			<div class="w-[min(30rem,90vw)] bg-white rounded-2xl border-2 border-accent flex flex-col gap-4 p-6">
				<h3 class="font-bold text-2xl">Удаление товара</h3>
				<hr/>
				<p class="text-subtext">Вы уверены, что хотите удалить товар { product.Title }?</p>
				<div class="w-full flex flex-row gap-2">
					<button
						hx-target={ fmt.Sprintf("#product_%d", product.ID) }
						hx-swap="outerHTML"
						class="delete"
						hx-delete={ fmt.Sprintf("/admin/api/products/%d", product.ID) }
						@click="delete_product_modal_open = false"
					>Удалить</button>
					<button class="submit" @click="delete_product_modal_open = false">Отмена</button>
				</div>
			</div>
		</span>
	}
}

func constructImagesDataTag(product *models.Product) string {
	res := "["
	images_length := len(product.Images)
	for i, image := range product.Images {
		res += fmt.Sprintf("'%s'", file_storage.ObjectStorageId(image).GetUrl("image", "webp"))
		if i != images_length-1 {
			res += ","
		}
	}

	res += "]"
	return res
}

templ EditProductModal(product *models.Product, categories []*models.Category) {
	@components.Modal("edit_product_modal_open") {
		<span hx-ext="response-targets" x-init="edit_product_modal_open = true">
			<form
				x-data={ fmt.Sprintf("{ image_urls: %s }", constructImagesDataTag(product)) }
				hx-put={ fmt.Sprintf("/admin/api/products/%d", product.ID) }
				hx-target={ fmt.Sprintf("#product_%d", product.ID) }
				hx-swap="outerHTML"
				hx-target-error="#edit-error"
				hx-indicator="#edit-loading"
				hx-encoding="multipart/form-data"
				class="w-[min(36rem,90vw)] max-h-[90vh] bg-white rounded-2xl border-2 border-accent flex flex-col overflow-y-scroll gap-2 p-6"
			>
				<div
					class="flex flex-col gap-4"
					x-init="$watch('images', images => {updateFiles(images)}); initImages(images)"
					x-data="{ 
              images: [],
              initImages: (images) => {
                let image_blobs = []
                let promises = []
                for (let i = 0; i < image_urls.length; i++) {
                  promises.push(
                    fetch(image_urls[i])
                      .then(res => res.blob())
                      .then(blob => {
                        image_blobs.push({
                          index: i,
                          blob: blob
                        })
                        return blob
                      })
                  )
                }

                Promise.all(promises).then(() => {
                  image_blobs.sort((a, b) => a.index - b.index)

                  for (let i = 0; i < image_blobs.length; i++) {
                    let file = new File([image_blobs[i].blob], `image_${i}.webp`, { type: 'image/webp' })
                    images.push(file)
                  }
                })
              },
              updateFiles: (images) => {
                let input = document.getElementById('add-images-input');
                let dt = new DataTransfer();
                for (let i = 0; i < images.length; i++) {
                  dt.items.add(images[i]);
                }
                input.files = dt.files;
              }
            }"
				>
					<div class="grid grid-cols-2 gap-2">
						<template x-for="(image, index) in images" :key="index">
							<div
								class="relative aspect-video group"
								x-sortable:images="index"
							>
								<div
									class="absolute top-2 right-2 w-4 h-4 group-hover:opacity-100 opacity-0 "
									@click="images = images.filter(i => i !== image); updateFiles(images)"
								>
									@icons.Delete("w-4 h-4 hover:scale-105 cursor-pointer")
								</div>
								<img class="h-full w-full object-contain" x-bind:src="window.URL.createObjectURL(image)"/>
							</div>
						</template>
					</div>
					<label class="submit">
						Загрузить фотографии
						<input
							class="hidden"
							type="file"
							accept="image/*"
							name="images"
							id="add-images-input"
							@change="images = [...images, ...$el.files]; updateFiles(images); console.log(images)"
							multiple
						/>
					</label>
				</div>
				@components.LabeledInput("Название", templ.Attributes{"type": "text", "name": "title", "value": product.Title},
					"w-full")
				@components.LabeledInput("Ссылка", templ.Attributes{"type": "text", "name": "slug", "value": product.Slug}, "w-full")
				@components.LabeledInput("Цена", templ.Attributes{"value": fmt.Sprintf("%d", product.Price), "type": "number", "name": "price"}, "w-full")
				@components.LabeledInput("Цена со скидкой (0 - без скидки)", templ.Attributes{"value": fmt.Sprintf("%d", product.DiscountPrice), "type": "number", "name": "discount_price"}, "w-full")
				@components.LabeledInput("Тэги", templ.Attributes{"value": product.Tags, "type": "text", "name": "tags"}, "w-full")
				<label>
					Категория
					<select name="category" id="add-category" class="select">
						for _, category := range categories {
							<option value={ fmt.Sprintf("%d", category.ID) } selected?={ category.ID == product.CategoryId }>{ category.Name }</option>
						}
					</select>
				</label>
				<label>
					Наличие
					<select name="stock_type" id="add-stock_type" class="select">
						for _, stock_type := range models.STOCK_TYPES_ARRAY {
							<option value={ fmt.Sprintf("%d", stock_type) } selected?={ stock_type == product.StockType }>{ stock_type.ToString() }</option>
						}
					</select>
				</label>
				@components.LabeledTextarea("Описание", templ.Attributes{"name": "description"}, product.Description)
				@components.Checkbox("Отображается", "add-is_enabled", "is_enabled", "true", product.IsEnabled)
				@components.Checkbox("На главной", "add-is_featured", "is_featured", "true", product.IsFeatured)
				<p id="error" class="error"></p>
				<p id="edit-loading" class="text-sm htmx-indicator">Загрузка...</p>
				<button class="submit" x-on:htmx:after-swap.window="edit_product_modal_open = false">Сохранить</button>
			</form>
		</span>
	}
}

templ ProductsList(products []*models.Product, next_page int, search string) {
	for _, product := range products {
		@Product(product)
	}
	if len(products) == models.PRODUCTS_PER_PAGE {
		<span
			class="hidden"
			hx-get={ fmt.Sprintf("/admin/api/products/page/%d?search=%s", next_page, search) }
			hx-target="#product-list"
			hx-swap="beforeend"
			hx-trigger="revealed"
			hx-indicator="#pagination-loading"
		></span>
	}
}

templ productsApi(products []*models.Product, search string) {
	<span x-data="{ add_product_modal_open: false }" id="add-product-target"></span>
	<span id="edit-product-target" x-data="{ edit_product_modal_open: false }"></span>
	<span id="delete-product-target" x-data="{ delete_product_modal_open: false }"></span>
	<div class="container mx-auto p-4 flex flex-col gap-6 mt-16">
		<div class="flex flex-row gap-2">
			<input
				type="text"
				class="input"
				name="search"
				placeholder="Поиск"
				hx-post="/admin/api/products/search"
				hx-target="#product-list"
				hx-swap="innerHTML"
				hx-trigger="input changed delay:500ms, search"
				value={ search }
			/>
			<button
				class="submit"
				hx-get="/admin/api/products/add"
				hx-target="#add-product-target"
				hx-swap="innerHTML"
			>Добавить</button>
		</div>
		<div class="flex flex-col gap-2" id="product-list">
			@ProductsList(products, 2, search)
		</div>
		<p class="htmx-indicator" id="pagination-loading">Загрузка...</p>
	</div>
}

templ Products(products []*models.Product, search string) {
	@Base("Товары") {
		@productsApi(products, search)
	}
}

templ ProductsApi(products []*models.Product, search string) {
	@scripts.SetTitle("Товары")
	@Navbar()
	@productsApi(products, search)
}
