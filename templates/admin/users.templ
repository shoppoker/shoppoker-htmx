package admin_templates

import "github.com/w1png/go-htmx-ecommerce-template/models"
import "github.com/w1png/go-htmx-ecommerce-template/templates/scripts"
import "fmt"
import "github.com/w1png/go-htmx-ecommerce-template/templates/components"
import "github.com/w1png/go-htmx-ecommerce-template/templates/components/icons"

templ User(user *models.User) {
	<div class="admin-object-card-parent justify-between p-2" id={ fmt.Sprintf("user_%d", user.ID) }>
		<span class="text-xl truncate">{ user.Username }</span>
		<div class="flex flex-row gap-2">
			<button
				class="submit h-12 group"
				hx-get={ fmt.Sprintf("/admin/api/users/%d/edit", user.ID) }
				hx-target="#edit-admin-target"
				hx-swap="innerHTML"
			>
				@icons.Edit("h-6 aspect-square text-white group-hover:text-accent block md:hidden")
				<span class="hidden md:block">Редактировать</span>
			</button>
			<button
				class="delete h-12 group"
				hx-get={ fmt.Sprintf("/admin/api/users/%d/delete", user.ID) }
				hx-target="#delete-admin-target"
				hx-swap="innerHTML"
			>
				@icons.Delete("h-6 aspect-square text-white group-hover:text-delete block md:hidden")
				<span class="hidden md:block">Удалить</span>
			</button>
		</div>
	</div>
}

templ UsersList(users []*models.User, next_page int, search string) {
	for _, user := range users {
		@User(user)
	}
	if len(users) == models.USERS_PER_PAGE {
		<span
			class="hidden"
			hx-get={ fmt.Sprintf("/admin/api/users/page/%d?search=%s", next_page, search) }
			hx-target="#user-list"
			hx-swap="beforeend"
			hx-trigger="revealed"
			hx-indicator="#pagination-loading"
		></span>
	}
}

templ EditAdminModal(user *models.User) {
	@components.Modal("edit_admin_modal_open") {
		<span hx-ext="response-targets" x-init="edit_admin_modal_open = true">
			<form
				hx-put={ fmt.Sprintf("/admin/api/users/%d", user.ID) }
				hx-target={ fmt.Sprintf("#user_%d", user.ID) }
				hx-swap="outerHTML"
				hx-target-error="#error"
				class="w-[min(30rem,90vw)] bg-white rounded-2xl border-2 border-accent flex flex-col gap-2 p-6"
			>
				@components.LabeledInput("Имя пользователя", templ.Attributes{"type": "text", "name": "username", "value":
    user.Username}, "w-full")
				@components.LabeledInput("Пароль", templ.Attributes{"type": "password", "name": "password"}, "w-full")
				@components.LabeledInput("Повтор пароля", templ.Attributes{"type": "password", "name": "password_repeat"}, "w-full")
				<p id="error" class="error"></p>
				<button class="submit" x-on:htmx:after-swap.window="edit_admin_modal_open = false">Сохранить</button>
			</form>
		</span>
	}
}

templ DeleteAdminModal(user *models.User) {
	@components.Modal("delete_admin_modal_open") {
		<span hx-ext="response-targets" x-init="delete_admin_modal_open = true">
			<div class="w-[min(30rem,90vw)] bg-white rounded-2xl border-2 border-accent flex flex-col gap-4 p-6">
				<h3 class="font-bold text-2xl">Удаление пользователя</h3>
				<hr/>
				<p class="text-subtext">Вы уверены, что хотите удалить пользователя { user.Username }?</p>
				<div class="w-full flex flex-row gap-2">
					<button
						hx-target={ fmt.Sprintf("#user_%d", user.ID) }
						hx-swap="outerHTML"
						class="delete"
						hx-delete={ fmt.Sprintf("/admin/api/users/%d", user.ID) }
						@click="delete_admin_modal_open = false"
					>Удалить</button>
					<button class="submit" @click="delete_admin_modal_open = false">Отмена</button>
				</div>
			</div>
		</span>
	}
}

templ AddAdminModal() {
	@components.Modal("add_admin_modal_open") {
		<span hx-ext="response-targets" x-init="add_admin_modal_open = true">
			<form
				hx-post="/admin/api/users"
				hx-target="#user-list"
				hx-swap="afterbegin"
				hx-target-error="#error"
				class="w-[min(30rem,90vw)] bg-white rounded-2xl border-2 border-accent flex flex-col gap-2 p-6"
			>
				@components.LabeledInput("Имя пользователя", templ.Attributes{"type": "text", "name": "username"}, "w-full")
				@components.LabeledInput("Пароль", templ.Attributes{"type": "password", "name": "password"}, "w-full")
				@components.LabeledInput("Повтор пароля", templ.Attributes{"type": "password", "name": "password_repeat"}, "w-full")
				<p id="error" class="error"></p>
				<button class="submit" x-on:htmx:after-swap.window="add_admin_modal_open = false">Добавить</button>
			</form>
		</span>
	}
}

templ usersPage(users []*models.User, search string) {
	<span x-data="{ add_admin_modal_open: false }" id="add-admin-target"></span>
	<span id="edit-admin-target" x-data="{ edit_admin_modal_open: false }"></span>
	<span id="delete-admin-target" x-data="{ delete_admin_modal_open: false }"></span>
	<div class="container mx-auto p-4 flex flex-col gap-6 mt-16">
		<div class="flex flex-row gap-2">
			<input
				type="text"
				class="input"
				name="search"
				placeholder="Поиск"
				hx-post="/admin/api/users/search"
				hx-target="#user-list"
				hx-swap="innerHTML"
				hx-trigger="input changed delay:500ms, search"
				value={ search }
			/>
			<button
				class="submit"
				hx-get="/admin/api/users/add"
				hx-target="#add-admin-target"
				hx-swap="innerHTML"
			>Добавить</button>
		</div>
		<div class="flex flex-col gap-2" id="user-list">
			@UsersList(users, 2, search)
		</div>
		<p class="htmx-indicator" id="pagination-loading">Загрузка...</p>
	</div>
}

templ UsersApi(users []*models.User, search string) {
	@scripts.SetTitle("Пользователи")
	@Navbar()
	@usersPage(users, search)
}

templ Users(users []*models.User, search string) {
	@Base("Пользователи") {
		@usersPage(users, search)
	}
}
